# Language definition
--langdef=ATS
--map-ATS=+.dats
--map-ATS=+.sats
--map-ATS=+.hats

# Kind definitions
# pattern: <letter>,<name>,<description>
--kinddef-ATS=f,function,function
--kinddef-ATS=t,type,type
--kinddef-ATS=c,constant,constant
--kinddef-ATS=p,proof,proof

# Function definitions
--mline-regex-ATS=/^(fun|fn|castfn|prfun|prfn|fnx|and|implement)[[:space:]]*(\{[[:space:]]*[^\}]*[[:space:]]*\})*[[:space:]]*(\([^\)]*\))*[[:space:]]*([[:alnum:]\$_]+)[[:space:]]*[\(\[\{\<]/\4/f/{mgroup=4}

# Constant definitions
# (only trying to parse constant forward declarations)
--mline-regex-ATS=/^val[[:space:]]*([[:alnum:]_]+)[[:space:]]*\:/\1/c/{mgroup=1}

# Type and constant definitions
--mline-regex-ATS=/^(typedef|datatype|sortdef|propdef|viewtypedef|vtypedef|dataviewtype|datavtype)[[:space:]]*([[:alnum:]_]+)[[:space:]]*[\(\=\:]/\2/t/{mgroup=2}

# Proof definitions
--mline-regex-ATS=/^(praxi|dataprop|absviewtype|absvtype|abstype|absprop)[[:space:]]*([[:alnum:]_]+)[[:space:]]*[\(\{\=\:]/\2/p/{mgroup=2}
